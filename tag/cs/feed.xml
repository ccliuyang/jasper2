<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/cs/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2020-03-20T04:04:23+00:00</updated>
  <id>/tag/cs/feed.xml</id>

  
  
  

  
    <title type="html">Ghost | </title>
  

  
    <subtitle>The professional publishing platform</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">【redis】一、Redis 数据库入门初体验</title>
      <link href="/redis-%E4%B8%80-Redis-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8%E5%88%9D%E4%BD%93%E9%AA%8C" rel="alternate" type="text/html" title="【redis】一、Redis 数据库入门初体验" />
      <published>2020-03-19T09:16:00+00:00</published>
      <updated>2020-03-19T09:16:00+00:00</updated>
      <id>/%E3%80%90redis%E3%80%91%E4%B8%80%E3%80%81Redis%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8%E5%88%9D%E4%BD%93%E9%AA%8C</id>
      <content type="html" xml:base="/redis-%E4%B8%80-Redis-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8%E5%88%9D%E4%BD%93%E9%AA%8C">&lt;h1 id=&quot;redis一redis-数据库入门初体验&quot;&gt;【redis】一、Redis 数据库入门初体验&lt;/h1&gt;

&lt;p&gt;Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简介：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Redis 是一个开源的，使用 ANSI C 语言编写的，可基于内存亦可持久化的日志型 Key-Value数据库，提供多种语言的 API。 从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Redis 中文官方网站&lt;/strong&gt;：&lt;a href=&quot;http://www.redis.cn/&quot;&gt;http://www.redis.cn/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redis 官网&lt;/strong&gt;：&lt;a href=&quot;https://redis.io/&quot;&gt;https://redis.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis-为什么这么受欢迎--redis-八大特性&quot;&gt;Redis 为什么这么受欢迎？ ———— Redis 八大特性&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;速度快
Redis 使用 C 语言实现;&lt;br /&gt;
Redis 所有的数据均存储于内存中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;持久化
Redis所有数据存储在内存中，对数据的更新将异步地保存到磁盘内。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持多种数据结构&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Redis 支持五种数据结构： String, List, Hash, Set, Zset&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;支持多种编程语言&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;支持 Java，php，Python，Ruby，Lua，Node.js&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;功能丰富&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;除了支持五种数据结构以外，还支持&lt;strong&gt;事务、流水线、发布/订阅、消息队列&lt;/strong&gt;等功能。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;轻量级源码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;约23000行C语言源代码，相比于mysql，MongoDB，Oracle等应用级数据库少太多。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;主从复制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;主服务器执行添加、修改、删除，从服务器执行查询。主从可以自动进行数据同步。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;高可用及可分布式
    &lt;ul&gt;
      &lt;li&gt;Redis-Sentinel (v2.8) 支持高可用性&lt;/li&gt;
      &lt;li&gt;Redis-Cluster (v3.0) 支持分布式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>Dexfire Alex</name>
        
        
      </author>

      

      
        <category term="redis" />
      
        <category term="cs" />
      
        <category term="dev" />
      

      
        <summary type="html">【redis】一、Redis 数据库入门初体验</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">【CS】编译原理</title>
      <link href="/CS-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86" rel="alternate" type="text/html" title="【CS】编译原理" />
      <published>2020-03-18T23:58:00+00:00</published>
      <updated>2020-03-18T23:58:00+00:00</updated>
      <id>/%E3%80%90CS%E3%80%91%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86</id>
      <content type="html" xml:base="/CS-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86">&lt;h1 id=&quot;编译原理&quot;&gt;编译原理&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;什么是编译？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译是指将&lt;strong&gt;高级语言&lt;/strong&gt;代码（C，C++，Java等），通过低级语言（通常为&lt;strong&gt;汇编&lt;/strong&gt;）实现的过程，最终输出为机器可执行的&lt;strong&gt;二进制机器码&lt;/strong&gt;文件。&lt;/p&gt;

&lt;p&gt;最常接触到的是 C/C++ 编译过程，C/C++ 是一门十分高效的编程语言，其面向对象的编码思想，与其丰富的工具库，高效率的执行机制，使其成为了当今几乎所有性能依赖场景的主流编程语言。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;编译工作的几个步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译过程通常可以抽象为几个过程：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;预处理&lt;/li&gt;
  &lt;li&gt;编译&lt;/li&gt;
  &lt;li&gt;链接&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;C/C++ 语言编译流程与编译工具链(toolchain)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C/C++ 代码在编译过程中使用工具链（toolchain）来进行整个编译工作，工具链是一系列预编译好的可执行工具程序、预编译库、预编译头文件、辅助脚本等组件构成，可以完成简单文件的编译工作。&lt;/p&gt;

&lt;p&gt;一款盛名远扬的开源编译工具链：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GCC&lt;/strong&gt;: GNU(Gnu’s Not Unix)编译器套装(GNU Compiler Collection)：&lt;/p&gt;

&lt;p&gt;以GPL及LGPL许可证所发行的自由软件，也是GNU项目的关键部分，也是GNU工具链的主要组成部分之一。GCC(特别是其中的C语言编译器)也常被认为是跨平台编译器的事实标准。1985年由理查德·马修·斯托曼开始发展，&lt;strong&gt;现在由自由软件基金会负责维护工作&lt;/strong&gt;。GCC原本用C开发，后来因为LLVM、Clang的崛起，它才将开发语言转换为C++。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GCC支持的语言：原名为GNU C语言编译器(GNU C Compiler)，因为它原本只能处理C语言。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GCC在发布后很快地得到扩展，变得可处理C++。之后也变得可处理Fortran、Pascal、Objective-C、Java、Ada，Go与其他语言。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;许多操作系统，包括许多类Unix系统，如Linux及BSD家族都采用GCC作为标准编译器。苹果电脑预装的Mac OS X操作系统也采用这个编译器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GCC目前由世界各地不同的数个程序员小组维护。它是移植到最多中央处理器架构以及最多操作系统的编译器。由于GCC已成为GNU系统的官方编译器(包括GNU/Linux家族)，它也成为编译与创建其他操作系统的主要编译器，包括BSD家族、Mac OS X、NeXTSTEP与BeOS。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GCC通常是跨平台软件的编译器首选。有别于一般局限于特定系统与运行环境的编译器，GCC在所有平台上都使用同一个前端处理程序，产生一样的中介码，因此此中介码在各个其他平台上使用GCC编译，有很大的机会可得到正确无误的输出程序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GCC支持的主要处理器架构：ARM、x86、x86-64、MIPS、PowerPC等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GCC结构：GCC的外部接口长得像一个标准的Unix编译器。用户在命令行下键入gcc之程序名，以及一些命令参数，以便决定每个输入文件使用的个别语言编译器，并为输出代码使用适合此硬件平台的汇编语言编译器，并且选择性地运行连接器以制造可执行的程序。每个语言编译器都是独立程序，此程序可处理输入的源代码，并输出汇编语言码。全部的语言编译器都拥有共通的中介架构：一个前端解析匹配此语言的源代码，并产生一抽象语法树，以及一翻译此语法树成为GCC的寄存器转换语言的后端。编译器最优化与静态代码解析技术在此阶段应用于代码上。最后，适用于此硬件架构的汇编语言代码以杰克·戴维森与克里斯·弗雷泽发明的算法产出。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;几乎全部的GCC都由C/C++写成，除了Ada前端大部分以Ada写成。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;编译器前端：编译组织器（典例：clang）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clang：是一个C、C++、Objective-C和Objective-C++编程语言的编译器前端。它采用了底层虚拟机(LLVM)作为其后端。它的目标是提供一个GNU编译器套装(GCC)的替代品。作者是克里斯·拉特纳(Chris Lattner)，在苹果公司的赞助支持下进行开发，而源代码授权是使用类BSD的伊利诺伊大学厄巴纳-香槟分校开源码许可。Clang主要由C++编写。&lt;/p&gt;

&lt;p&gt;Clang项目包括Clang前端和Clang静态分析器等。这个软件项目在2005年由苹果电脑发起，是LLVM(Low Level Virtual Machine)编译器工具集的前端(front-end)，目的是输出代码对应的抽象语法树(Abstract Syntax Tree, AST)，并将代码编译成LLVM Bitcode。接着在后端(back-end)使用LLVM编译成平台相关的机器语言。&lt;/p&gt;

&lt;p&gt;Clang本身性能优异，其生成的AST所耗用掉的内存仅仅是GCC的20%左右。2014年1月发行的FreeBSD 10.0版将Clang/LLVM作为默认编译器。&lt;/p&gt;

&lt;p&gt;Clang性能：测试证明Clang编译Objective-C代码时速度为GCC的3倍，还能针对用户发生的编译错误准确地给出建议。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;作者：跃文
链接：https://www.jianshu.com/p/ed17352299ec
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Dexfire Alex</name>
        
        
      </author>

      

      
        <category term="cs" />
      
        <category term="dev" />
      
        <category term="embd" />
      

      
        <summary type="html">编译原理</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Github 博客设置 CNAME 网站别名</title>
      <link href="/python-python%E8%AF%BB%E5%86%99yaml%E6%96%87%E4%BB%B6" rel="alternate" type="text/html" title="Github 博客设置 CNAME 网站别名" />
      <published>2020-03-01T18:06:00+00:00</published>
      <updated>2020-03-01T18:06:00+00:00</updated>
      <id>/%E3%80%90python%E3%80%91python%E8%AF%BB%E5%86%99yaml%E6%96%87%E4%BB%B6</id>
      <content type="html" xml:base="/python-python%E8%AF%BB%E5%86%99yaml%E6%96%87%E4%BB%B6">&lt;h1 id=&quot;python-读写yaml文件&quot;&gt;Python 读写yaml文件&lt;/h1&gt;</content>

      
      
      
      
      

      <author>
          <name>Dexfire Alex</name>
        
        
      </author>

      

      
        <category term="cs" />
      
        <category term="web" />
      
        <category term="git" />
      

      
        <summary type="html">Python 读写yaml文件</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Github 博客设置 CNAME 网站别名</title>
      <link href="/github-cnames" rel="alternate" type="text/html" title="Github 博客设置 CNAME 网站别名" />
      <published>2020-03-01T18:06:00+00:00</published>
      <updated>2020-03-01T18:06:00+00:00</updated>
      <id>/github-cnames</id>
      <content type="html" xml:base="/github-cnames">&lt;p&gt;nothing&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Dexfire Alex</name>
        
        
      </author>

      

      
        <category term="cs" />
      
        <category term="web" />
      
        <category term="git" />
      

      
        <summary type="html">nothing</summary>
      

      
      
    </entry>
  
</feed>
